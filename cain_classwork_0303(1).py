# -*- coding: utf-8 -*-
"""Cain classwork 0303

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C-jL-tYnnmQ0t1_K0LXp2ywqLd4ICqTE
"""

#Carmen Cain
#IS 733 01
#Dr. Basnyat
#March 5, 2025

#calculuating K-nearest neighbor with Python

from re import X
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

df = pd.read_csv("hamspam.csv.csv")
df.head()
df.shape
df.columns

X = df[['Contains Link', 'Contains Money Words', 'Length']]
y = df['Class']


#Preprocessing
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(), ['Contains Link', 'Contains Money Words', 'Length'])
    ])

#KNN pipeline
knn_pipeline = Pipeline(steps = [
    ('preprocessor', preprocessor),
    ('knn', KNeighborsClassifier(n_neighbors=5))
])

#Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Fit the model
knn_pipeline.fit(X_train, y_train)

#Predict
predictions = knn_pipeline.predict(X_test)
print(predictions)

#Accuracy
accuracy = knn_pipeline.score(X_test, y_test)
print(accuracy)

#there has to be a more organized way to print these results


#calculating naive Bayes with Python